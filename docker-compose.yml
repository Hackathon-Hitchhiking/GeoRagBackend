version: "3"
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "python -m uvicorn app:app --host 0.0.0.0 --port 8000"
  
  ml:
    build:
      context: ./ml/
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_started
      minio:
        condition: service_started
      s3-init:
        condition: service_completed_successfully
    environment:
      DEV_MODE: "${DEV_MODE:-true}"
      LOG_LEVEL: "${LOG_LEVEL:-DEBUG}"
      ALLOWED_HOSTS: "${ALLOWED_HOSTS:-*}"
      DATABASE_DSN: "${DATABASE_DSN_DOCKER:-postgresql+asyncpg://postgres:postgres@postgres:5432/georag}"
      DATABASE_ECHO: "${DATABASE_ECHO:-false}"
      S3_BUCKET: "${S3_BUCKET:-geo-images}"
      S3_ENDPOINT_URL: "${S3_ENDPOINT_URL:-http://s3:9000}"
      S3_REGION: "${S3_REGION:-ru-central1}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY:-localstack}"
      S3_SECRET_KEY: "${S3_SECRET_KEY:-localstack}"
      S3_USE_SSL: "${S3_USE_SSL:-false}"
      S3_IMAGES_PREFIX: "${S3_IMAGES_PREFIX:-images}"
      S3_FEATURES_PREFIX: "${S3_FEATURES_PREFIX:-features/local}"
      S3_GLOBAL_PREFIX: "${S3_GLOBAL_PREFIX:-features/global}"
      FEATURE_MAX_KEYPOINTS: "${FEATURE_MAX_KEYPOINTS:-4096}"
      LOCAL_FEATURE_TYPE: "${LOCAL_FEATURE_TYPE:-superpoint_max}"
      GLOBAL_DESCRIPTOR_TYPE: "${GLOBAL_DESCRIPTOR_TYPE:-netvlad}"
      MATCHER_TYPE: "${MATCHER_TYPE:-lightglue}"
      RETRIEVAL_CANDIDATES: "${RETRIEVAL_CANDIDATES:-32}"
      GLOBAL_SCORE_WEIGHT: "${GLOBAL_SCORE_WEIGHT:-0.35}"
      LOCAL_SCORE_WEIGHT: "${LOCAL_SCORE_WEIGHT:-0.65}"
      GEOMETRY_SCORE_WEIGHT: "${GEOMETRY_SCORE_WEIGHT:-0.25}"
      MAX_SEARCH_RESULTS: "${MAX_SEARCH_RESULTS:-50}"
      INDEX_REFRESH_INTERVAL: "${INDEX_REFRESH_INTERVAL:-7200}"
      COMPUTE_DEVICE: "${COMPUTE_DEVICE:-}"
      NOMINATIM_USER_AGENT: "${NOMINATIM_USER_AGENT:-GeoRAG/1.0 (+https://example.com)}"
      NOMINATIM_TIMEOUT: "${NOMINATIM_TIMEOUT:-50}"
      MAPILLARY_TOKEN: "${MAPILLARY_TOKEN:-}"
    ports:
      - "8000:8000"
    volumes:
      - nn_models:/models
      - ./train_data:/app/train_data


  s3-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_started
    environment:
      S3_ENDPOINT_URL: "${S3_ENDPOINT_URL:-http://ml:9000}"
      S3_BUCKET: "${S3_BUCKET:-geo-images}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY:-localstack}"
      S3_SECRET_KEY: "${S3_SECRET_KEY:-localstack}"
    entrypoint: >-
      /bin/sh -c "
      set -euo pipefail;
      until mc alias set local "$${S3_ENDPOINT_URL}" "$${S3_ACCESS_KEY}" "$${S3_SECRET_KEY}"; do
        echo 'Waiting for MinIO...';
        sleep 1;
      done;
      mc mb --ignore-existing local/$${S3_BUCKET};
      mc anonymous set download local/$${S3_BUCKET};
      "
    restart: "no"

  postgres:
    image: postgres:latest
    container_name: db
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    env_file:
      - .docker/.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    build:
      dockerfile: ./Dockerfile
      context: ./.docker/nginx/
    container_name: nginx
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - frontend_storage:/usr/share/nginx/html
    env_file:
      - .docker/.env
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
      - "9000:9000"
      - "9001:9001"

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    volumes:
      - static_storage:/data
    env_file:
      - .docker/.env
    command: server /data --console-address :9001
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_storage:
  static_storage:
  frontend_storage:
  nn_models:

